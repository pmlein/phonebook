{"version":3,"sources":["components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","_this","this","react_default","a","createElement","props","persons","map","person","key","id","name","number","onClick","deletePerson","React","Component","Notification","_ref","message","className","baseUrl","getAll","axios","get","then","response","data","create","newObject","post","update","put","concat","del","window","confirm","delete","res","console","log","catch","err","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","personService","newPersons","state","filter","p","setState","error","alert","nameExists","newN","found","length","addPerson","event","preventDefault","personObject","newName","newPhone","newPerson","msg","setTimeout","handleNameChange","target","value","handlePhoneChange","handleFilterChange","filterFind","filterPersons","showAll","bind","assertThisInitialized","_this2","_this3","personsToShow","startsWith","components_Notification","onSubmit","onChange","type","components_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c16d6f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n  /* Arrow function did not work here (delete person was problem) */\r\nclass Persons extends React.Component  {\r\n  render() {\r\n    return (\r\n    <ul>      \r\n        {this.props.persons.map(person => \r\n        <li key={person.id}>{person.name} {person.number} \r\n          <button \r\n          onClick={this.props.deletePerson(person.id, person.name)}>Poista</button>\r\n        </li> \r\n      )}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n  export default Persons","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    } else {\r\n    return (\r\n      <div className=\"msg\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n  export default Notification","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n /*   const nonExisting = {\r\n        id: 10000,\r\n        content: 'Tätä muistiinpanoa ei ole palvelimelta',\r\n        date: '2017-12-10T17:30:31.098Z',\r\n        important: true\r\n      } */\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(baseUrl+`/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id, name) => {\r\n    if (window.confirm(`Do you really want to delete ${name}?`)) {      \r\n        const request = axios.delete(baseUrl+`/${id}`)\r\n        //const request = axios.delete(`http://localhost:3001/persons/${id}`)\r\n        //return request.then(response => response.data)\r\n        return request.then(res => {\r\n            console.log('Poisto ')\r\n        /*this.setState(previousState => {\r\n            return {\r\n            movies: previousState.movies.filter(m => m.id !== movie.id)\r\n            };\r\n        });*/\r\n        })\r\n        .catch(err => {\r\n        console.log(err);\r\n        });\r\n    } // if\r\n}\r\n\r\nexport default { getAll, create, update, del}\r\n","import React from 'react'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nimport './index.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      newName: '',\n      newPhone: '',\n      showAll: true,\n      filterFind: '',\n      msg: null\n    }\n    this.deletePerson = this.deletePerson.bind(this);\n  }\n\n\n  deletePerson = (id, name) => {\n    return () => {\n      //const newPersons = this.state.persons.filter(p => p.id !== id)\n      //console.log('deletePerson funktiossa: ' , newPersons)\n \n      personService\n        .del(id, name)\n        .then(newPersons => { \n           const persons = this.state.persons.filter(p => p.name !== name) \n       this.setState({\n          persons: persons\n        })\n      })\n      .catch(error => {\n        alert(`Person '${name}' on jo valitettavasti poistettu palvelimelta`)\n      })\n    }\n  } \n\n  /*\n   Checks that name does not exist in phone book\n  */\n  nameExists = (newN) => {    \n    let found = this.state.persons.filter(p => p.name === newN)\n    if (found.length > 0) {\n      return found[0].id\n    } else {\n      return null\n    } \n  }\n\n  componentDidMount() {\n    personService\n      .getAll()\n      .then(response => {\n        this.setState({ persons: response })\n      })\n  }\n\n\n\n  \n  addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: this.state.newName,\n      number: this.state.newPhone\n    }\n    // Added if name does not exist\n    //if (!this.nameExists(this.state.newName)) {\n      if (this.nameExists(this.state.newName)===null) {\n      personService\n        .create(personObject)\n        .then(newPerson => {\n          this.setState({\n            persons: this.state.persons.concat(newPerson),\n            newName: '',\n            newPhone: '',\n            msg: \"Henkilö lisätty!\"\n          })\n          setTimeout(() => {\n            this.setState({msg: null})\n          }, 5000)\n        })\n    } \n    else {\n      if (window.confirm(`Nimi ${this.state.name} on jo luetttelossa, korvataanko numero?`)) {\n        personService\n          .update(this.state.id,personObject)\n          .then(newPerson => {\n            this.setState({\n              persons: this.state.persons,\n              \n              newName: '',\n              newPhone: ''\n\n            })\n          }) \n      }\n    }\n  }\n\n\n  handleNameChange = (event) => {\n    this.setState({ newName: event.target.value })\n  }\n  handlePhoneChange = (event) => {\n    this.setState({ newPhone: event.target.value })\n  }\n  handleFilterChange = (event) => {\n    this.setState({ filterFind: event.target.value })\n  }\n\n  filterPersons = (event) => {\n    event.preventDefault()\n    if (!(this.state.filterFind==='')) {\n      this.setState({\n        showAll: false\n      })\n    } \n    else {\n      this.setState({\n        showAll: true,\n        filterFind: ''\n      })\n    } \n  }\n  render() {\n\n    const personsToShow =\n    this.state.showAll ?\n      this.state.persons :\n      this.state.persons.filter(p => (p.name.startsWith(this.state.filterFind)))\n\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n\n          <Notification message={this.state.msg}/>\n       \n\n        <form onSubmit={this.filterPersons}>\n           Rajaa näytettäviä: <input \n                value={this.state.filterFind}\n                onChange={this.handleFilterChange}\n              />\n        </form>\n         <h3>Lisää uusi yhteystieto</h3>\n        <form onSubmit={this.addPerson}>\n          <div>\n            Nimi: <input\n                value={this.state.newName}\n                onChange={this.handleNameChange}\n          />\n          </div>\n          <div>\n            Puhelin: <input \n                value={this.state.newPhone}\n                onChange={this.handlePhoneChange}\n          />\n          </div>         \n          <div>\n            <button type=\"submit\">lisää</button>\n          </div>\n        </form>\n        <h2>Numerot</h2>\n        <Persons persons={personsToShow} \n            deletePerson={this.deletePerson} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}